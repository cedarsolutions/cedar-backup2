#!/bin/sh
# Creates a Python virtual environment for use in Makefile or Jenkins.

# Process command-line arguments
if [ $# = 2 ]; then
   VERSION=${1}
   DIR=${2}
   REBUILD="false"
elif [ $# = 3 ]; then
   if [ "${1}" = "--rebuild" ]; then
      VERSION=${2}
      DIR=${3}
      REBUILD="true"
   else
      echo "Usage: virtualenv [--rebuild] <version> <dir>"
      echo "Creates a Python virtual environment for the version in the directory."
      exit 1
   fi
else
   echo "Usage: virtualenv [--rebuild] <version> <dir>"
   echo "Creates a Python virtual environment for the version in the directory."
   exit 1
fi

# Configuration
VIRTUALENV=virtualenv
PYTHON=${DIR}/bin/python
PIP=${DIR}/bin/pip
DEPENDENCIES="chardet>=2.3.0 pylint>=1.4.4 coverage>=3.7.1"

# Delete the virtualenv if we're supposed to rebuild it
if [ "${REBUILD}" = "true" ]; then
   rm -rf ${DIR}
fi

# Rebuild the virtualenv if it doesn't exist
if [ ! -d ${DIR} ]; then
   echo "Creating virtual environment for Python ${VERSION}..."

   ${VIRTUALENV} --quiet --python=python${VERSION} ${DIR}
   if [ $? != 0 ]; then
      echo "Failed to create virtual environment for Python ${VERSION}"
      exit 1
   fi

   for PACKAGE in ${DEPENDENCIES}; do
      echo -n "Installing ${PACKAGE}..." 
      ${PIP} install --quiet "${PACKAGE}" >/dev/null 2>&1 
      if [ $? != 0 ]; then
         echo "failed."
         exit 1
      else
         echo "done."
      fi
   done
fi

# Log a message indicating which environment is in use
PYTHON_RESULT=`${PYTHON} -V 2>&1`  # Python 2 dumps this info to stderr
PIP_RESULT=`${PIP} --version | awk '{print $1" "$2}'`
echo "Working with ${PYTHON_RESULT} (${PIP_RESULT}) at ${PYTHON}"

