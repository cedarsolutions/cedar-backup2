<!-- 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
#              C E D A R
#          S O L U T I O N S       "Software done right."
#           S O F T W A R E
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# Copyright (c) 2005 Kenneth J. Pronovici.
# All rights reserved.
#
# This work is licensed under the Creative Commons Attribution-
# ShareAlike License. To view a copy of this license, visit
# http://creativecommons.org/licenses/by-sa/2.0/
# or send a letter to Creative Commons, 559 Nathan Abbott Way,
# Stanford, California 94305, USA.
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# Author   : Kenneth J. Pronovici <pronovic@ieee.org>
# Language : O'Reilly DocBook Lite XML DTD
# Project  : Cedar Backup, release 2
# Revision : $Id$
# Purpose  : Cedar Backup software manual, Basic Concepts chapter.
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
-->

<chapter id="cedar-basic">

   <title>Basic Concepts</title>

   <!-- ################################################################# -->

   <sect1 id="cedar-basic-general">

      <title>General Architecture</title>

      <para>
         Cedar Backup is architected as a Python package (library) and single
         executable (a Python script).  The Python package provides both
         application-specific code and general utilities which can be used by
         programs other than Cedar Backup.  It also includes modules that will
         be of use to third parties who might like to extend Cedar Backup or
         provide related functionality.
      </para>

      <para>
         The <command>cback</command> script is designed to run as
         root, since otherwise it's difficult to back up system directories or
         write the CD-R/CD- RW device.  However, pains are taken to use the
         backup user's effective user id (specified in configuration) when
         appropriate.
      </para>

      <para>
         Note that there is no facility for restoring backups.  It is assumed
         that the user can deal with copying tarfiles off disc and using them
         to restore missing files as needed.
      </para>

      <para>
         The <command>cback</command> script is configured via command-line
         options and an XML configuration file on disk.  The configuration file
         is normally stored in <filename>/etc/cback.conf</filename>, but this
         path can be overridden at runtime.   See <xref linkend="cedar-config"/>
         for more information on how Cedar Backup is configured.
      </para>

   </sect1>

   <!-- ################################################################# -->

   <sect1 id="cedar-basic-pools">

      <title>Cedar Backup Pools</title>

      <para>
         There are two kinds of machines in a Cedar Backup pool.  One machine
         (the <firstterm>master</firstterm>) has a CD-R or CD-RW drive on it
         and is where the backup is written to disc.  The others
         (<firstterm>clients</firstterm>) collect data to be written to disc by
         the master.  Collectively, the master and client machines in a pool
         are all referred to as <firstterm>peer machines</firstterm>. 
      </para>

      <para>
         Cedar Backup has been designed primarily for situations where there is
         a single master and a set of other clients that the master interacts
         with.  However, it will just as easily work for a single machine (a
         backup pool of one) and in fact more users seem to use it like this
         than any other way.
      </para>

   </sect1>

   <!-- ################################################################# -->

   <sect1 id="cedar-basic-process">

      <title>The Backup Process</title>

      <para>
         The Cedar Backup backup process is structured in terms of a set of
         decoupled actions which execute independently (based on a schedule in
         <command>cron</command>) rather than through some highly coordinated
         flow of control.  
      </para>
         
      <para>
         This design decision has both positive and negative consequences.  On
         the one hand, the code is much simpler and can choose to simply abend
         or log an error if its expectations are not met.  On the other hand,
         the initial set-up process requires some extra work on behalf of the
         administrator, in order to coordinate all of the various actions so
         that they work together properly.
      </para>

      <para>
         A standard backup run consists of four steps (actions), some of which
         execute on the master machine, and some of which execute on one or
         more client machines.  These actions are:
         <firstterm>collect</firstterm>, <firstterm>stage</firstterm>,
         <firstterm>store</firstterm> and <firstterm>purge</firstterm>.
      </para>

      <para>
         In general, more than one action may be specified on the command-line.
         If more than one action is specified, then actions will be taken in a
         sensible order (generally collect, followed by stage, followed by
         store, followed by purge).   A special <firstterm>all</firstterm>
         action is also allowed, which implies all of the standard actions in
         the same sensible order.
      </para>

      <para>
         The <command>cback</command> command also supports several actions
         that are not part of the standard backup run and cannot be executed
         along with any other actions.  These actions are
         <firstterm>validate</firstterm> and <firstterm>rebuild</firstterm>.
         All of the various actions are discussed further below.
      </para>

      <note>
         <para>
            See <xref linkend="cedar-config"/> for more information on how a
            backup run is configured.
         </para>
      </note>

      <!-- ################################################################# -->

      <sect2 id="cedar-basic-process-collect">
         
         <title>The Collect Action</title>

         <para>
            The collect action is the first action to be executed as part of a
            standard backup run.  It executes on a client peer node.  Based on
            configuration, this action traverses the client's filesystem and
            gathers files to be backed up.  Each configured high-level
            directory is collected up into its own <command>tar</command> file
            in the <firstterm>collect directory</firstterm>.   The
            <command>tar</command>files can either be uncompressed
            (<filename>.tar</filename>) or compressed with either
            <command>gzip</command> (<filename>.tar.gz</filename>) or
            <command>bzip2</command> (<filename>.tar.bz2</filename>).
         </para>

         <para>
            There are three supported collect modes:
            <firstterm>daily</firstterm>, <firstterm>weekly</firstterm> and
            <firstterm>incremental</firstterm>.  Directories configured for
            daily backups are backed up every day.  Directories configured for
            weekly backups are backed up on the first day of the week.
            Directories configured for incremental backups are traversed every
            day, but only the files which have changed (based on a saved-off
            <firstterm>SHA hash</firstterm>) are actually backed up.
         </para>
            
         <para>
            Collect configuration also allows for a variety of ways to filter
            files and directories out of the backup.  For instance,
            administrators can configure an <firstterm>ignore indicator
            file</firstterm> 
            <footnote><para>Analagous to <filename>.cvsignore</filename> in CVS</para></footnote> 
            or specify absolute paths or filename patterns 
            <footnote><para>In terms of Python regular expressions</para></footnote>
            to be excluded.
         </para>

      </sect2>

      <!-- ################################################################# -->

      <sect2 id="cedar-basic-process-stage">
         
         <title>The Stage Action</title>

         <para>
            The stage action is the second action to be executed
            as part of a standard backup run.  It executes on a master peer
            node.  The master machine works down the list of clients in its
            backup pool and stages (copies) the collected backup files from
            each of them into a daily staging directory by client name.
         </para>

         <para> 
            Local and remote client peers are treated differently.  Local peer
            collect directories are assumed to be accessible via normal copy
            commands (i.e. on a mounted filesystem) while remote peer collect
            directories are accessed via an <firstterm>RSH-compatible</firstterm>
            command such as <command>ssh</command>.
         </para>

         <para>
            If a given peer is not ready to be staged, the stage process will
            log an error but will go on to its other peers.  This way, one
            broken peer cannot break a backup for other peers which are up and
            running.
         </para>

         <note>
            <para>
               Nothing prevents you from staging <quote>collect</quote>
               directories that were not created by cback.  As long as the file
               <filename>cback.collect</filename> exists in a collect directory
               when the stage action is taken, that directory will be staged.
               This is a convenient way to have Cedar Backup write to disc
               directories <quote>collected</quote> through some other process.
               Just beware that within the staging directory, everything for a
               be careful to avoid namespace clash.  You can use it as an
               alternative to writing a Cedar Backup extension, if you would
               like.
            </para>
         </note>

      </sect2>

      <!-- ################################################################# -->

      <sect2 id="cedar-basic-process-store">
         
         <title>The Store Action</title>

         <para>
            The store action is the third action to be executed as part of a
            standard backup run.  It executes on a master peer node.  The
            master machine determines the location of the current staging
            directory, and then writes the contents of that staging directory
            to disc.  After the contents of the directory have been written to
            disc, an optional validation step ensures that the write was
            successful.
         </para>

         <para>
            If the backup is running on first day of the week, if the drive
            does not support multisession discs, or if the
            <option>--full</option> option is passed to the
            <command>cback</command> command, the disc will be rebuilt from
            scratch.   Otherwise, a new ISO session will be added to the disc
            each day the backup runs.  
         </para>
         
         <para>
            The store action also supports several options which modify its
            behavior.  If enabled, the <firstterm>safe overwrite</firstterm>
            option forces an attempt to ensure that any disc in the drive is
            either blank or a previously-used Cedar Backup disc.  The
            <firstterm>capacity mode</firstterm> option drives exception
            behavior if disc capacity is exceeded. 
         </para>

      </sect2>

      <!-- ################################################################# -->

      <sect2 id="cedar-basic-process-purge">
         
         <title>The Purge Action</title>

         <para>
            The purge action is the fourth and final action to be
            executed as part of a standard backup run.  It executes both on the
            master peer node and on the various client peer nodes.
            Configuration specifies how long to retain files in certain
            directories, and files older than that are purged along with empty
            directories.
         </para>

         <para>
            Typically, collect directories are purged daily, and stage
            directories are purged weekly or slightly less often than that
            (this way, if a disc gets corrupted, older backups may still be
            available on the master).  Some users also choose to purge the
            configured working directory (which is used for temporary files) to
            eliminate any leftover files which might have resulted from changes
            to configuration.
         </para>

      </sect2>

      <!-- ################################################################# -->

      <sect2 id="cedar-basic-process-all">
         
         <title>The All Action</title>

         <para>
            The all action is a pseudo-action which causes all of
            the actions in a standard backup run to be executed together in
            a sensible order.  It cannot be combined with any other actions on
            the command line.
         </para>

         <para>
            The all action first determines which actions from among the
            standard actions are listed in configuration.  Any configured
            actions are then executed in a sensible order, typically collect,
            followed by stage, followed by store, followed by purge.
         </para>

         <para>
            The all action does not have any configuration of its
            own.  Instead, it relies on the individual configuration sections
            for all of the other actions.  See <xref linkend="cedar-config"/>
            for more information.
         </para>

         <para>
            Extensions cannot be configured to be executed as part of the all
            action.  If you need to execute an extended action, you must
            specify the other actions you want to run individually on the
            command line.
         </para>

      </sect2>

      <!-- ################################################################# -->

      <sect2 id="cedar-basic-process-validate">
         
         <title>The Validate Action</title>

         <para>
            The validate action is used to validate configuration
            on a particular peer node, either master or client.   It cannot be
            combined with any other actions on the command line.
         </para>

         <para>
            The validate action checks that the configuration file
            can be found, that the configuration file is valid, and that
            certain portions of the configuration file make sense.
         </para>

      </sect2>

      <!-- ################################################################# -->

      <sect2 id="cedar-basic-process-rebuild">
         
         <title>The Rebuild Action</title>

         <para>
            The rebuild action is an exception-handling action
            that is executed independently of any standard backup run.  It cannot
            be combined with any other actions on the command line.
         </para>

         <para>
            The rebuild action attempts to rebuild <quote>this
            week's</quote> disc from any remaining unpurged stage directories.
            Typically, it would be used to make a copy of a backup or to
            replace media that was damaged or lost, or perhaps to switch to new
            media mid-week for some reason.
         </para>

         <para>
            To decide what data to write to disc again, the rebuild action
            looks back and finds the nearest previous starting day of week and
            its date.  Working from there, it finds any remaining staging
            directories between that date and the current date.  If any staging
            directories are found, they are all written to disc in one big ISO
            session.
         </para>

         <para>
            The rebuild action does not have any configuration of its own.
            Instead, it mostly relies configuration for the store action.  
         </para>

      </sect2>

   </sect1>

   <!-- ################################################################# -->

   <sect1 id="cedar-basic-mediadevice">

      <title>Media and Device Types</title>

      <para>
         Cedar Backup is focused around writing backups to CD-R or CD-RW media
         using a standard SCSI or IDE CD writer.  <footnote><para>The device I
         develop against is a six or seven year old Sony CRX140E 4X CD-RW
         drive.</para></footnote>
      </para>

      <para>
         Cedar Backup currently supports four different kinds of media:
      </para>

      <variablelist>

         <varlistentry>
            <term>cdr-74</term>
            <listitem>
               <para>74-minute non-rewritable media</para>
            </listitem>
         </varlistentry>

         <varlistentry>
            <term>cdrw-74</term>
            <listitem>
               <para>74-minute rewritable media</para>
            </listitem>
         </varlistentry>

         <varlistentry>
            <term>cdr-80</term>
            <listitem>
               <para>80-minute non-rewritable media</para>
            </listitem>
         </varlistentry>

         <varlistentry>
            <term>cdrw-80</term>
            <listitem>
               <para>80-minute rewritable media</para>
            </listitem>
         </varlistentry>

      </variablelist>

      <para>
         I have chosen to support just these four types of media because they
         seem to be the most <quote>standard</quote> of the various types
         commonly sold in the U.S. today (early 2005).  If you regularly use
         media a media type that is not supported by Cedar Backup, and would
         like Cedar Backup to support it, send me information about the
         capacity of the media in megabytes (MB) and whether or not it is
         rewritable.  
      </para>

      <para>
         Future versions of Cedar Backup may support writable DVDs in some
         form.  <footnote><para>It would just require a new
         <literal>DvdWriter</literal> class in <filename>writer.py</filename>
         as well as some minor changes to configuration code.  All
         writer-related access is through an abstract interface, so once the
         new writer is implemented, the rest of the code will be able to use it
         without any changes.</para></footnote> However, this cannot
         happen unless I can get access to hardware for development and
         testing, or unless someone else is willing to do research and test
         code on my behalf.   If you would like to see support for DVDs in
         Cedar Backup and can offer some help, please write the Cedar Backup
         Users mailing list.  <footnote><para>See the Cedar Solutions <ulink
         url="http://cedar-solutions.com/listarchives/"> Mailing Lists</ulink>
         page for more information.</para></footnote>
      </para>

   </sect1>

   <!-- ################################################################# -->

   <sect1 id="cedar-basic-incremental">

      <title>Incremental Backups</title>

      <para>
         Cedar Backup supports three different kinds of backups for individual
         collect directories.  These are <firstterm>daily</firstterm>,
         <firstterm>weekly</firstterm> and <firstterm>incremental</firstterm>.
         Directories using the daily mode are backed up every day.  Directories
         using the weekly mode are only backed up on the first day of the week,
         or when the <option>--full</option> option is used.  Directories
         using the incremental mode are always backed up on the first day of
         the week (like a weekly backup) but after that are only backed up if
         they have changed since the previous backup.
      </para>

      <para>
         In Cedar Backup, incremental backups are not based on date, but are
         instead based a saved-off checksums, one for each backed-up file.
         When a full backup is run, Cedar Backup gathers a checksum value
         <footnote><para>The checksum is actually an <firstterm>SHA
         cryptographic hash</firstterm>.  See this <ulink
         url="http://en.wikipedia.org/wiki/SHA-1">Wikipedia article</ulink> or
         the <ulink url="http://www.itl.nist.gov/fipspubs/fip180-1.htm">Secure
         Hash Standard</ulink> for more information.</para></footnote> for each
         backed-up file.  The next time an incremental backup is run, Cedar
         Backup checks its list of file/checksum pairs for each file that might
         potentially be backed up.  If the file's checksum value does not match
         the saved-off value, or if the file does not appear in the list of
         file/checksum pairs, then it will be backed up and a new checksum
         value will be placed into the list.  Otherwise, the file will be
         ignored and the checksum value will be left unchanged.
      </para>

      <para>
         Cedar Backup stores the file/checksum pairs in <filename>.sha</filename> 
         files in its working directory, one file per collect directory.  The
         mappings in these files are reset at the start of the week or when the
         <option>--full</option> option is used.  Because these files are used
         for an entire week, you should never purge the working directory more
         frequently than once per week.
      </para>

   </sect1>

   <!-- ################################################################# -->

   <sect1 id="cedar-basic-extensions">

      <title>Extensions</title>

      <para>
         Imagine that there is a third party developer who understands how to
         to back up Subversion (Berkeley DB) repositories.  This third party
         might want to integrate his or her specialized backup into the Cedar
         Backup process, perhaps thinking of the Subversion backup as a sort of
         <quote>collect</quote> step for Subversion repositories rather than
         filesystems.
      </para>

      <para>
         Prior to Cedar Backup 2.0, any such integration would have been
         completely independent of Cedar Backup itself.  The
         <quote>external</quote> backup functionality would have had to
         maintain its own configuration and would not have had access to any
         Cedar Backup configuration.
      </para>

      <para>
         Starting with version 2.0, Cedar Backup implements the concept of
         <firstterm>extensions</firstterm> to the backup process.   An
         extension is an action that isn't part of the standard backup process,
         (i.e. not collect, stage, store or purge) but can be executed by Cedar
         Backup when properly configured.
      </para>

      <para>
         Extension authors implement an <quote>action process</quote> function
         with a certain interface, and are allowed to add their own sections to
         the Cedar Backup configuration file, so that all backup configuration
         can be centralized.  Then, the action process function is associated
         with an action name (i.e. <quote>subversion</quote>) which can be
         executed from the <command>cback</command> command line like any other
         action.
      </para>

      <para>
         Although the initial 2.0 release will not include any extensions, it
         is our hope that as use of Cedar Backup 2.0 grows, users will
         contribute their own extensions back to the community.  Well-written
         general-purpose extensions will be accepted into the official
         codebase, and we already have plans for a Subversion extension, a
         MySQL extension, and an extension for collecting important system
         information (<command>fdisk</command>information, etc.) to accompany a
         backup.
      </para>

      <note>
         <para>
            See <xref linkend="cedar-config"/> for more information on how
            extensions are configured.  Also, developers may be interested in
            the extensions in <xref linkend="cedar-appendixb"/>.
         </para>
      </note>

   </sect1>

</chapter>

