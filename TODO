# vim: set ft=text132:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
#              C E D A R
#          S O L U T I O N S       "Software done right."
#           S O F T W A R E
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# Author   : Kenneth J. Pronovici <pronovic@ieee.org>
# Project  : Cedar Backup, release 2
# Revision : $Id$
# Purpose  : TODO list for package
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

* Change sort order of parameters, classes within modules, etc. where needed in Epydoc
* Implement "safe overwrite" functionality from aborted 2.x branch into CdWriter - shouldn't be too difficult.
* Implement overwrite, rebuild and rewrite capacity mode functionality (right now, we just did 'discard' and 'fail')
* Implement consistency check in store action - it's not even stubbed right now.
* Maybe change config not to accept these capacity modes?  Then we wouldn't have to log so many errors?
* Put a check somewhere (not in the CD writer) to make sure the device isn't mounted
* Write individual action functions (process.py) in terms of other lower-level functionality
* Implement a cli module (might take this from aborted 2.x branch?) for command-line interface
* Do a bunch of sample runs to get the logging level right (difference between "normal" and debug...?)
* Go back through TODO list from aborted 2.x branch and decide what we will do now, what later, and what never.
* Go back through bugzilla bugs and make sure they're all taken into account now that entire cli is finished.
* Create manpages and other instructions either in Docbook or by hand.
* Rewrite Cedar Backup webpage online, to show new version and link to old version.

* Write some sort of "what's new" paragraph for release of 2.0beta1
   - Entire codebase has been rewritten from the ground up using Python 2.3.
   - Cleaner, more pythonic, better structured, sensible mix of classes and functions
   - Much of the  lower-level is intended to be general-purpose "library" code
   - All lower-level functionality is thoroughly regression tested via pyunit (1500+ individual unit tests)
   - Configuration class is standardized, so third-party Python programs can use it.
   - Uses Python's integrated logging for realtime logs, much better than old logs.
   - Uses Python's tar module rather than GNU tar via pipes, for more consistent behavior.
   - Internal use of pipes should now be more robust and less prone to problems.
   - Support for some new functionality, such as "optimized fit to disc" (???)
   - Documentation has been completely rewritten
   - Document that we have dropped support for the tarz format (.tar.Z).
